    安装完成后，还需要最后一步设置，在命令行输入：
        $ git config --global user.name "FlyBird-S"
        $ git config --global user.email "eesongpengfei@foxmail.com"
    因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。
    注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
    
    创建代码仓库
        git init //将当前目录设置为git仓库
        git add file_name //将文件添加如仓库
        git commit -m "message"//提交并添加消息
    时光机穿梭
            git status//随时掌握工作区的状态
            git diff//可以查看修改内容。
        版本回退
            git log //查看commit记录
            git reset --hard commit_id//HEAD指向的版本就是当前版本 
            git reflog//参考命令历史以便确定要回到未来的哪个版本
        工作区和暂存区
            文件修改--》在工作区
            git add后进入暂存区
            git checkout -- file//可以将工作区的文本舍弃
            
            场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
            
            场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。  
            场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，版本回退一节，不过前提是没有推送到远程库。
        删除文件
            git rm//删除一个文件后，用此命令将文件从仓库中删除
            git checkout//用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。           
            
    Github: 远程库
        连接github：
            第1步：创建SSHKey。
            在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C "eesongpengfei@foxmail@foxmail.com"你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
            第2步：
            
            登陆GitHub打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
        从本地库添加到远程库
            登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库。将仓库命与本地库名相同。
            git remote add origin https://github.com/FlyBird-S/git_pack.git//根据提示进行关联
            git push -u origin master//第一次将本地库推送至远程库
            git push origin master//以后推送执行此命令
        从远程库添加到本地库
            git clone git@github.com:FlyBird-S/spider_practice.git
            git clone git@github.com:ID_NAME/Repositories_name.git
            要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
            Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
    分支管理
            Git鼓励大量使用分支：

            查看分支：git branch

            创建分支：git branch <name>

            切换分支：git checkout <name>

            创建+切换分支：git checkout -b <name>

            合并某分支到当前分支：git merge <name>

            删除分支：git branch -d <name>
            当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
            用git log --graph命令可以看到分支合并图。
            Git分支十分强大，在团队开发中应该充分应用。合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
            git log --graph --pretty=oneline --abbrev-commit
            修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
            
            开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
            查看远程库信息，使用git remote -v；

            本地新建的分支如果不推送到远程，对其他人就是不可见的；

            从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

            在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

            建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

            从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

    标签管理（commit 的标签）
            命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

            git tag -a <tagname> -m "blablabla..."可以指定标签信息；

            git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

            命令git tag可以查看所有标签。
            
            命令git push origin <tagname>可以推送一个本地标签；

            命令git push origin --tags可以推送全部未推送过的本地标签；

            命令git tag -d <tagname>可以删除一个本地标签；

            命令git push origin :refs/tags/<tagname>可以删除一个远程标签。