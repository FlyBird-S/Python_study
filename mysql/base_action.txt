//login
mysql -u root -p
//change prompt（提示符）   \u(user) \h(host) \d(database)
prompt \u@\h \d>  
SET NAMES gbk;
delimiter //  #修改已;为结束
ROW_COUNT() #返回上次操作影响的行
 
#数据库
CREATE DATABASE xxx;#创建
use database xxx;#选择
drop database xxx;#删除
SHOW DATAFILES;
SHOW CREATE DATABASE t1;
CREATE DATABASE [IF NOT EXISTS] t2 CHARACTER SET = gbk；
ALTER DATABASE t2 CHARACTER SET = utf8;

#数据表
 use database_name;  #打开数据库
 select database(); #可以查看当前打开的数据库
 create table [if not exists] table_name(column_name datatype,......)#创建数据表
    eg:
          test>create TABLE tb1(
            -> username VARCHAR(20) NOT NULL,#NOT NULL 该参数必须被赋值
            -> age TINYINT UNSIGNED,
            -> salary FLOAT(8,2) UNSIGNED
            -> );
  SHOW TABLES [FROM db_name] ;#查看数据表
  DROP TABLE table_name ; #删除数据表
  
  SHOW COLUMNS FROM tb1;#查看数据表结构
  INSERT [INTO] table_name[(column_name),..] VALUES(va1,...) #插入记录
  SELECT expr,... FROM tb1_name
  eg:
        >select * from tb1;
        +----------+------+---------+
        | username | age  | salary  |
        +----------+------+---------+
        | Son      |   25 | 4500.50 |
        | LI       | NULL |   25.30 |
        +----------+------+---------+
#约束  
   #非空约束 NOT NULL
   #主键约束（PRIMARY KEY）,每张数据表唯一存在的，保证记录的唯一性。
        #自动编号   AUTO_INCREMENT 必须与主键一起使用。
               create table tb3(
                -> id smallint unsigned auto_increment primary key,
                -> username varchar(20)
                -> );
                root@localhost test>show columns from tb3;
            +----------+----------------------+------+-----+---------+----------------+
            | Field    | Type                 | Null | Key | Default | Extra          |
            +----------+----------------------+------+-----+---------+----------------+
            | id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
            | username | varchar(20)          | YES  |     | NULL    |                |
            +----------+----------------------+------+-----+---------+----------------+
   #唯一约束（UNIQUE KEY）,也可以保证记录的唯一性，最多可以有一个空值。每张数据表可以有多个唯一约束。
               create table tb5
            -> (
            -> id smallint unsigned auto_increment primary key,
            -> username varchar(20) not null UNIQUE KEY, # UNIQUE KEY 保证不能username必须不能重复
            -> age tinyint unsigned);
    #默认约束（default key） 
                ->create table tb6 (
                -> id smallint unsigned auto_increment primary key,
                -> username varchar(20) not null unique key,
                -> sex enum('1','2','3') DEFAULT'3' # DEFAULT 可以设置默认值，在未赋值时使用默认值
                -> );
    #外键约束 默认引擎需要为 default-storage-engine=INNODB（my.ini）
    （外键就是与之相关联表的主键）
       1）、创建父表
        -> create table provinces(
        -> id smallint unsigned primary key auto_increment,
        -> pname varchar(20) not null);
        确保引擎为 INNODB
        -> show create table provinces;
       2）、创建子表
            mysql> create table users(
            -> id smallint unsigned primary key auto_increment,
            -> username varchar(10) not null,                       #要想添加省信息，只需要与已有的表关联
            -> pid smallint unsigned,                               #保证与主表主键类型一致
            -> foreign key (pid) references provinces(id)           #参考provinces表
            -> );
        父表provinces中的id被称作参照列，子表中的pid称为外键列。参照列与外键列必须有索引，当参照列为主键时mysql会为其自动添加索引。
        通过 show indexes from table_name\G查看索引
        #外键参数：
        cascade：从父表删除或更新且自动删除更新子表中匹配的行（父表改变影响子表）
                mysql> create table users1(
                -> id smallint unsigned primary key auto_increment,
                -> username varchar(10) not null,
                -> pid smallint unsigned,
                -> foreign key (pid) references provinces(id) ON DELETE CASCADE
                -> );
        SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。选用此选型时，必须保证子表列没有指定NOT NULL。（父表改变子表变null）
        RESTRICT ：拒绝父表的删除更改操作
        NO ACTION：与RESTRICT 相同
    实际情况中不使用物理外键约束，使用逻辑外键约束。
    
    #表级约束与列级约束
     对一个数据列建立的约束，称为列级约束。对多个数据列建立的约束，称为表级约束。列级约束可以在列定义时声明，也可以在列定义后声明。表级约束只能在列定义以后声明
#数据表的修改
    #列修改
        #添加单列
        ALTER TABLE table_name ADD[column] column_name column_definition [FIRST | AFTER column_name] 
        eg:
            mysql> alter table users1 add age tinyint unsigned not null default 10;
            mysql> alter table users1 add password varchar(20) not null default "laowang" after username;
            mysql> alter table users1 add trunname varchar(20) not null default "xiaowang" afirst;
        #添加多列
        ALTER TABLE table_name ADD[column] (column_name column_definition)
        #删除列 Alter table table_name drop[column] column_name
            mysql> alter table users1 drop trunname;
            mysql> alter table users1 drop age, drop password;
    #修改约束
        #添加主键约束   
           ALTER TABLE users1 ADD [CONSTRAINT[symbol]]  PRIMARY KEY [index_type](index_col_name,...);
        mysql> alter table users1 add constraint pk_users1_id primary key (id);
        #添加唯一约束   
           ALTER TABLE users1 ADD [CONSTRAINT[symbol]]  UNIQUE [index| key][index_name][index_type](index_col_name,...);
         mysql> alter table users1 add  unique (username);
        #添加外键约束 
           ALTER TABLE users1 ADD [CONSTRAINT[symbol]]  FOREIGN KEY [index| key][index_name](index_col_name,...) REFERENCES();
           mysql> alter table users1 add foreign key (pid) references provinces (id);
        #添加默认约束
            ALTER TABLE tb1_name ALTER[COLUMN] col_name{
        SET DEFAULT literal| DROP DEFAULT}           
           alter table users1 alter age set default 15;
        #删除主键约束 
            ALTER TABLE tbl_name DROP PRIMARY KEY
        #删除唯一约束
            ALTER TABLE tbl_name DROP {INDEX|KEY} index_name    
            eg:mysql> ALTER TABLE users1 DROP INDEX username;
        #删除外键约束  
            ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol
            首先通过mysql> show create table   users1;查看约束名，
            mysql> alter table users1 drop foreign key users1_ibfk_1;    
    #修改列定义
            ALTER TABLE tbl_name MODIFY[COLUMN] col_name col_definition[FIRST| AFTER col_name]
            mysql> alter table users1 modify id smallint unsigned not null first;
    #修改列名称、定义
            ALTER TABLE tb1_name CHANGE[COLUMN] old_name new_name column_definition [FIRST | AFTER col_name]
            eg:mysql> alter table users1 change pid p_id tinyint unsigned not null;
    #修改数据表名词
            1、ALTER TABLE tbl_name RENAME[TO|AS] new_tbl_name
            eg: mysql> alter table users1 rename users2;
            2、RENAME TABLE tb1_name TO new_tbl_name[,tb1_name2 to new_tbl_name2...]
            eg: mysql> rename table tb1 to tb_1, tb2 to tb_2;
#记录的操作
    #插入记录(自动编号的赋值NULL、或者defualt)
           1、 INSERT[INFO] tb1_name[(col_name,..)]{VALUES|VALUE}({expr|DEFAULT},...),(..),...
           eg: mysql> insert user_test values (default,'tom4','123',7*2),(null,'laow','11',2);
           2、 INSERT[INFO] tb1_name SET col_name=expr|DEFAULT},...#可以使用子查询
           eg: mysql> INSERT user_test SET username='song',password='123';
           3、 INSERT[INFO] tb1_name[(col_name,..)]SELECT...
           eg: insert test(username) select username from users where age > 30;#将age>30的username从一个表写入另一个表
    #记录修改
            1、UPDATE[LOW_PRIORITY][IGNORE] table_reference SET col_name={expr1|DEFAULT}...[WHERE where_condition](单表更新)
            eg:
                mysql> update user_test set age = age + 5;
                mysql> update user_test set sex = id ,password="321";
                mysql> update user_test set age=age+10 where id % 2 = 0;
    #记录删除
            DELETE FROM tb1_name [WHERE where_condition]
            mysql> delete from user_test where id = 6;
    #查询表达式
    每一个表达式表示想要的一列，必须有至少一个。多个列之间以英文逗号分隔。星号(*)表示所有列。tbl_name.*可以表示命名表的所有列。查询表达式可以使用[ AS ] alias_name为其赋予别名。别名可用于GROUP BY,ORDER BY或HAVING子句。
        #SELECT: eg：mysql> select username,id  from user_test;
                     mysql> select user_test.username,user_test.id  from user_test;
                     通过别名查看：mysql> select id as userid,username as uname from user_test;
                     
        SELECT select_expr[, select_expr ...]
            [

              FROM table_references

              [WHERE where_condition]

              [GROUP BY {col_name | position} [ASC | DESC], ...]

              [HAVING where_condition]

              [ORDER BY {col_name | expr | position} [ASC | DESC], ...]

              [LIMIT {[offset, ]row_count | row_count OFFSET offset}]

            ]
        #WHERE: 条件
        #查询结果分组：
             [GROUP BY{col_name | position}[ASC|DESC],...]#ASC升序 #DESC降序
             mysql> select * from user_test group by age;
                +----+----------+----------+------+------+
                | id | username | password | sex  | age  |
                +----+----------+----------+------+------+
                |  1 | tom      | 321      |    1 |   10 |
                |  2 | tom1     | 321      |    2 |   20 |
                +----+----------+----------+------+------+
            #分组条件
            [having condition]
            eg: mysql> select * from user_test group by age HAVING age > 10;
        #查询结果排序：[ORDER BY{col_name|expr|position}[ASC|DESC],...]
        eg:mysql> select * from user_test order by id DESC;
                +----+----------+----------+------+------+
                | id | username | password | sex  | age  |
                +----+----------+----------+------+------+
                |  7 | song     | 321      |    7 |   10 |
                |  5 | tom4     | 321      |    5 |   10 |
                |  4 | tom2     | 321      |    4 |   20 |
                |  3 | tom2     | 321      |    3 |   10 |
                |  2 | tom1     | 321      |    2 |   20 |
                |  1 | tom      | 321      |    1 |   10 |
                +----+----------+----------+------+------+
                mysql> select * from user_test order by age DESC,id DESC;
                +----+----------+----------+------+------+
                | id | username | password | sex  | age  |
                +----+----------+----------+------+------+
                |  4 | tom2     | 321      |    4 |   20 |
                |  2 | tom1     | 321      |    2 |   20 |
                |  7 | song     | 321      |    7 |   10 |
                |  5 | tom4     | 321      |    5 |   10 |
                |  3 | tom2     | 321      |    3 |   10 |
                |  1 | tom      | 321      |    1 |   10 |
                +----+----------+----------+------+------+
        #查询结果限制：[limit{offset,}row_count|row_count OFFSET offset]
                        mysql> select * from user_test limit 2;
                        mysql> select * from user_test limit 2,5;#从2开始5个
    #子查询：指的是在其他sql语句内的select字句。
        eg： select * from ti where col =(select col form t2) 其外层查询可以包括 select insert update set do...
        1、使用比较运算符的子查询
        mysql> select goods_id,goods_name,goods_price from tdb_goods where goods_price >= (select round(avg(goods_price),2) from tdb_goods);
        #在返回多行内容时可以通过以下三个操作符。
        ANY（subquery）= SOME（subquery）      
        ALL（subquery）
            eg:mysql> select goods_id,goods_name,goods_price from tdb_goods where goods_price >= ALL(select     goods_price from tdb_goods where goods_cate = "超级本" );
        2、使用[NOT] IN 的子查询
        operand comparison_openator [NOT] IN(subquery）)
        IN 等价于 =ANY
        NOT IN 等价于 !=ALL
            mysql> select goods_id,goods_name,goods_price from tdb_goods where goods_price IN(select     goods_price from tdb_goods where goods_cate = "超级本" );
        3、EXIST 子查询返回任何行EXIST 返回true否则返回false
       #inser ... select
       eg：mysql> insert tdb_goods_cates(cate_name) select goods_cate from tdb_goods group by goods_cate;
    #多表更新
        UPDATE table_references SET col_name1={expr1|DEFAULT}[,expr2|DEFAULT,..][WHERE where_condition]
        #table_references 语法
        {[INNER|CROSS]JOIN|{LEFT|RIGHT}[OUTER]JOIN}
        table_reference ON condition_expr
       eg:
       mysql> UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id;
       
     #CREATE ... SELECT 将查询结果在创建时写入
     CREATE TABLE [IF NOT EXISTS]  tlb_name[(create_definition)] select_statement
     eg:
         mysql> CREATE TABLE tdb_goods_brands(
        -> brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
        -> brand_name VARCHAR(40) NOT NULL
        -> )
        -> SELECT brand_name FROM tdb_goods GROUP BY brand_name;
        
        mysql> UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name SET g.brand_name = b.brand_id; #由于两张表都含有brand_name 所以要给表起别名
        mysql> ALTER TABLE tdb_goods
        -> CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,
        -> CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;
    #多表的连接：在使用逻辑外键时，需要多表协作需使用连接 可以用在多表更新、多表删除、select语句中
        A  [TYPE]JOIN B ON condition
        #[TYPE]JOIN 连接类型 
        #内连接
            JION== INNER JION == CROSS JOIN
        #外连接
            LEFT[OUTER]JOIN #左外连接
            RIGHT[OUTER]JOIN#右外连接
        #连接条件 ON 或者 WHERE（通常使用ON设立连接条件，使用WHERE 设立SELECT条件）
        内连接：显示左表及右表符合连接条件的记录，A ∩ B
        左外连接：显示左表中的全部和右表符合连接条件的记录，A ∪ (A ∩ B)
        右外连接：显示右表中的全部和左表符合连接条件的记录，B ∪ (A ∩ B)

        #多表连接
                eg： mysql> UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id;
             mysql> SELECT goods_name,cate_name FROM tdb_goods INNER JOIN tdb_goods_cates ON tdb_goods.cate_id = tdb_goods_cates.cate_id;
             #3 table
             mysql> SELECT goods_id,goods_name,cate_name,brand_name from tdb_goods AS a 
                 -> INNER JOIN tdb_goods_cates AS b ON a.cate_id = b.cate_id
                 -> INNER JOIN tdb_goods_brands AS c ON c.brand_id = a.brand_id;
        #自身连接
            #在无限分类的数据表设计中通常需要进行自身连接，自身连接一般需要用别名区分子表与父表
            mysql> SELECT s.type_id ,s.type_name,p.type_id,p.type_name FROM tdb_goods_types AS s INNER JOIN tdb_goods_types AS p
            -> ON s.parent_id = p.type_id;        
            mysql> SELECT p.type_id ,p.type_name,count(s.type_name) AS child_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s
            -> ON s.parent_id = p.type_id GROUP BY p.type_name;     GROUP
        #多表删除         
            DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id > t2.goods_id;     
#函数
        #字符函数
            #CONCAT() #字符连接
            #CONCAT_WS() #使用分隔符将字符连接
            #FORMAT() #数字格式化
            #LOWER() #转成小写
            #UPPER()  #转成大写
            #LEFT()   #获取左侧字符
            #RIGHT() #获取右侧字符
            #LENGTH() #获取字符串长度
            #LTRIM()  #删除前导空格
            #RTRIM()  #删除后续空格
            #TRIM()   #删除空格
            #SUBSTRING()#字符串截取
            #[NOT]LIKE #模式匹配
            LINK "%q"以q为最后一个字符的 % 为通配符
            #REPLACE()  #字符串替换
        #数值函数
            #CEIL() #向上取整
            #DIV()  #整数除法
            #FLOOR() #向下取整
            #MOD()    #取余数
            #POWER()    #幂运算
            #ROUND()    #四舍五入
            #TRUNCATE() #数字截取
        #比较运算符
            [NOT] BETWEEN...AND.. #[不]在范围之内
            [NOT] IN()            #[不]在列出范围之内
            IS [NOT] NULL         #[不]为空
        #日期与时间函数
            NOW()            #当前时间和日期
            CURDATE()        #当前日期
            CURTIME()        #当前时间
            DATE_ADD()       #日期变化
            DATEDIFF()       #日期差值
            DATE_FORMAT()    #日期格式化
        #信息函数
            CONNECTION_ID()  #连接ID
            DATABASE()       #当前数据库
            LAST_INSERT_ID() #最后插入记录的ID号
            USER()           #当前用户
            VERSION()        #版本信息
        #聚合函数
            AVG()
            COUNT()
            MAX()
            MIN()
            SUM()
        #加密函数
            MD5()              #信息摘要算法
            PASSWORD()         #密码算法 主要用来mysql密码修改
    #自定义函数user-defined-function  UDF
        CREATE FUNCTION function_name
        RETURNS{STRING|INTEGER|REAL|DECIMAL}routine_dody
        mysql> CREATE FUNCTION f1() RETURNS VARCHAR(30)
            -> RETURN DATE_FORMAT(NOW(),'%Y年%m月%d日 %H点:%i分：%s秒');    
        mysql> CREATE FUNCTION f2(num1 smallint unsigned,num2 smallint unsigned) RETURNS FLOAT(10,2) UNSIGNED
        -> RETURN (num1+num2)/2;
       
       mysql> delimiter //
       mysql> CREATE FUNCTION adduser(username VARCHAR(20))
        -> RETURNS INT UNSIGNED
        -> BEGIN
        -> INSERT tb3(username) values(username);
        -> RETURN LAST_INSERT_ID();
        -> END//    
        #将结尾符改为//可以在函数体内写语句，BEGIN END 之间可以写多行语句
#存储过程
        CREATE
        [DEFINER = { user|CURRENT_USER}]
        PROCEDURE sp_name ([proc_parameter[,...]])
        [characteristic ...]routine_body
        proc_parameter:
        [IN|OUT|INOUT]param_name type    
        eg：
        定义：mysql> CREATE PROCEDURE sp1() SELECT VERSION();
        创建：mysql> CALL sp1();  
        #带IN
        mysql> create procedure remove(IN _id tinyint)
        -> begin
        -> delete from ssss where id = _id;
        -> end//
        CALL remove(2) 
        #IN OUT
        mysql> create procedure remove_return(IN _id tinyint,OUT p_num tinyint)
        -> BEGIN
        -> DELETE FROM ssss where id = _id;
        -> SELECT count(id) FROM ssss INTO p_num;
        -> END//
        
        mysql> call remove_return(4,@unms);#@unms 用户变量
        mysql> select @unms;
        declare可以声明变量，比如  declare @a  int，只不过声明全局变量可以省略declare，而在begin--end里面声明需要用declare，而且要放在第一行
            
            
            
            
            
            
-- 无限分类的数据表设计

   CREATE TABLE tdb_goods_types(
     type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
     type_name VARCHAR(20) NOT NULL,
     parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0
  ); 
  -- 查找所有分类及其父类

  SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS  p ON s.parent_id = p.type_id;
   
-- 查找所有分类及其子类

  SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS  s ON s.parent_id = p.type_id;

-- 查找所有分类及其子类的数目

  SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id GROUP BY p.type_name ORDER BY p.type_id;

-- 为tdb_goods_types添加child_count字段

  ALTER TABLE tdb_goods_types ADD child_count MEDIUMINT UNSIGNED NOT NULL DEFAULT 0;

-- 将刚才查询到的子类数量更新到tdb_goods_types数据表

  UPDATE tdb_goods_types AS t1 INNER JOIN ( SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p 

                                            LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id 
                             
                                            GROUP BY p.type_name 

                                            ORDER BY p.type_id ) AS t2 

  ON  t1.type_id = t2.type_id 

  SET t1.child_count = t2.children_count;


-- 复制编号为12,20的两条记录

  SELECT * FROM tdb_goods WHERE goods_id IN (19,20);


-- INSERT ... SELECT实现复制

  INSERT tdb_goods(goods_name,cate_id,brand_id) SELECT goods_name,cate_id,brand_id FROM tdb_goods WHERE goods_id IN (19,20);

-- 查找重复记录

  SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2;

-- 删除重复记录

  DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id > t2.goods_id;
